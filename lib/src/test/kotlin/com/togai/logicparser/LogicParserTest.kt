/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package com.togai.logicparser

import io.github.jamsesso.jsonlogic.evaluator.JsonLogicEvaluationException
import java.lang.Integer.parseInt
import kotlin.test.Test
import kotlin.test.assertEquals

class LogicParserTest {

    @Test
    fun `validate rule with no variables- success`() {
        val logicParser = LogicParser()
        val response = logicParser.validateExpression(
            """
            {
                "+": [ 1, 2 ]
            }
        """.trimIndent(), hashSetOf()
        )

        assertEquals(true, response.status)
    }

    @Test
    fun `validate rule with variables - success`() {
        val logicParser = LogicParser()
        val response = logicParser.validateExpression(
            """
            {
                "+": [ {"var": "a"}, {"var": "b"} ]
            }
        """.trimIndent(), hashSetOf("a", "b", "c")
        )

        assertEquals(true, response.status)
    }

    @Test
    fun `validate rule with unknown variables - failure`() {
        val logicParser = LogicParser()
        val response = logicParser.validateExpression(
            """
            {
                "+": [ {"var": "a"}, {"var": "b"} ]
            }
        """.trimIndent(), hashSetOf("a")
        )

        assertEquals(false, response.status)
    }

    @Test
    fun `validate rule with unknown operators - failure`() {
        val logicParser = LogicParser()
        val response = logicParser.validateExpression(
            """
            {
                "xor": [ {"var": "a"}, {"var": "b"} ]
            }
        """.trimIndent(), hashSetOf("a", "b")
        )

        assertEquals(false, response.status)
    }

    @Test
    fun `validate rule with custom operation - success`() {
        val logicParser = LogicParser()
        logicParser.addOperation("custom") { args -> { args[0] as Int + args[1] as Int } }
        val response = logicParser.validateExpression(
            """
            {
                "custom": [ {"var": "a"}, {"var": "b"} ]
            }
            """.trimIndent(), hashSetOf("a", "b")
        )
        assertEquals(true, response.status)
    }

    @Test
    fun `evaluate rule with variables - success`() {
        val logicParser = LogicParser()
        val response = logicParser.evaluateExpression(
            """
            {
                "+": [ {"var": "a"}, {"var": "b"} ]
            }
        """.trimIndent(), mapOf("a" to "1", "b" to "2")
        )

        assertEquals(3.0, response)
    }

    @Test(expected = JsonLogicEvaluationException::class)
    fun `evaluate rule with unknown operator - failure`() {
        val logicParser = LogicParser()
        logicParser.evaluateExpression(
            """
            {
                "^": [ {"var": "a"}, {"var": "b"} ]
            }
        """.trimIndent(), mapOf("a" to "1", "b" to "2")
        )

    }

    @Test
    fun `evaluate rule with unknown variables - failure`() {
        val logicParser = LogicParser()
        val response = logicParser.evaluateExpression(
            """
            {
                "+": [ {"var": "a"}, {"var": "b"} ]
            }
        """.trimIndent(), mapOf("a" to "1")
        )

        assertEquals(null, response)
    }

    @Test
    fun `evaluate rule with decimals - failure`() {
        val logicParser = LogicParser()
        val response = logicParser.evaluateExpression(
            """
            {
                "*": [ {"var": "a"}, {"var": "b"} ]
            }
        """.trimIndent(), mapOf("a" to "1.03", "b" to "2.03")
        )

        assertEquals(2.0909, response)
    }

    @Test
    fun `evaluate rule with custom operation - success`() {
        val logicParser = LogicParser()
        val func = fun(args: Array<Any>): Any {
            return parseInt(args[0].toString()) + parseInt(args[1].toString())
        }
        logicParser.addOperation("custom", func)
        val response = logicParser.evaluateExpression(
            """
            {
                "custom": [ {"var": "a"}, {"var": "b"} ]
            }
        """.trimIndent(), mapOf("a" to "1", "b" to "2")
        )

        assertEquals(3, response)
    }
}
