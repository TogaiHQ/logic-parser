/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package com.togai.logicparser

import io.github.jamsesso.jsonlogic.JsonLogic
import io.github.jamsesso.jsonlogic.JsonLogicException
import io.github.jamsesso.jsonlogic.ast.JsonLogicArray
import io.github.jamsesso.jsonlogic.ast.JsonLogicNode
import io.github.jamsesso.jsonlogic.ast.JsonLogicOperation
import io.github.jamsesso.jsonlogic.ast.JsonLogicParser
import io.github.jamsesso.jsonlogic.ast.JsonLogicString
import io.github.jamsesso.jsonlogic.ast.JsonLogicVariable
import io.github.jamsesso.jsonlogic.evaluator.expressions.AllExpression
import io.github.jamsesso.jsonlogic.evaluator.expressions.ArrayHasExpression
import io.github.jamsesso.jsonlogic.evaluator.expressions.ConcatenateExpression
import io.github.jamsesso.jsonlogic.evaluator.expressions.EqualityExpression
import io.github.jamsesso.jsonlogic.evaluator.expressions.FilterExpression
import io.github.jamsesso.jsonlogic.evaluator.expressions.IfExpression
import io.github.jamsesso.jsonlogic.evaluator.expressions.InExpression
import io.github.jamsesso.jsonlogic.evaluator.expressions.InequalityExpression
import io.github.jamsesso.jsonlogic.evaluator.expressions.LogExpression
import io.github.jamsesso.jsonlogic.evaluator.expressions.LogicExpression
import io.github.jamsesso.jsonlogic.evaluator.expressions.MapExpression
import io.github.jamsesso.jsonlogic.evaluator.expressions.MathExpression
import io.github.jamsesso.jsonlogic.evaluator.expressions.MergeExpression
import io.github.jamsesso.jsonlogic.evaluator.expressions.MissingExpression
import io.github.jamsesso.jsonlogic.evaluator.expressions.NotExpression
import io.github.jamsesso.jsonlogic.evaluator.expressions.NumericComparisonExpression
import io.github.jamsesso.jsonlogic.evaluator.expressions.ReduceExpression
import io.github.jamsesso.jsonlogic.evaluator.expressions.StrictEqualityExpression
import io.github.jamsesso.jsonlogic.evaluator.expressions.StrictInequalityExpression
import io.github.jamsesso.jsonlogic.evaluator.expressions.SubstringExpression


data class ValidationResponse(val status: Boolean, val message: String? = null)

class LogicParser {
    private val jsonLogic = JsonLogic()
    private val expressionNames: HashSet<String> = HashSet()

    init {
        expressionNames.addAll(
            hashSetOf(
                MathExpression.ADD.key(),
                MathExpression.SUBTRACT.key(),
                MathExpression.MULTIPLY.key(),
                MathExpression.DIVIDE.key(),
                MathExpression.MODULO.key(),
                MathExpression.MIN.key(),
                MathExpression.MAX.key(),
                NumericComparisonExpression.GT.key(),
                NumericComparisonExpression.GTE.key(),
                NumericComparisonExpression.LT.key(),
                NumericComparisonExpression.LTE.key(),
                IfExpression.IF.key(),
                IfExpression.TERNARY.key(),
                EqualityExpression.INSTANCE.key(),
                InequalityExpression.INSTANCE.key(),
                StrictEqualityExpression.INSTANCE.key(),
                StrictInequalityExpression.INSTANCE.key(),
                NotExpression.SINGLE.key(),
                NotExpression.DOUBLE.key(),
                LogicExpression.AND.key(),
                LogicExpression.OR.key(),
                LogExpression.STDOUT.key(),
                MapExpression.INSTANCE.key(),
                FilterExpression.INSTANCE.key(),
                ReduceExpression.INSTANCE.key(),
                AllExpression.INSTANCE.key(),
                ArrayHasExpression.SOME.key(),
                ArrayHasExpression.NONE.key(),
                MergeExpression.INSTANCE.key(),
                InExpression.INSTANCE.key(),
                ConcatenateExpression.INSTANCE.key(),
                SubstringExpression.INSTANCE.key(),
                MissingExpression.ALL.key(),
                MissingExpression.SOME.key()
            )
        )
    }

    /**
     * Method to add custom operations
     */
    fun addOperation(name: String, function: (Array<Any>) -> Any) {
        expressionNames.add(name)
        jsonLogic.addOperation(name, function)
    }

    /**
     * Method to validate whether the rule is valid or not.
     **/
    fun validateExpression(rule: String, variables: HashSet<String>): ValidationResponse {
        try {
            val node = JsonLogicParser.parse(rule)
            traverseNode(node, variables)
        } catch (e: JsonLogicException) {
            return ValidationResponse(false, e.message)
        }
        return ValidationResponse(true)
    }

    /**
     * Method to evaluate the rule using the given data.
     **/
    fun evaluateExpression(rule: String, data: Map<String, String>): Any? {
        return jsonLogic.apply(rule, data)
    }

    private fun traverseNode(node: JsonLogicNode, variables: HashSet<String>) {
        when(node) {
            is JsonLogicVariable -> {
                if (node.key !is JsonLogicString) {
                    throw JsonLogicException("Variable name must be a string")
                }
                if (!variables.contains((node.key as JsonLogicString).value)) {
                    throw JsonLogicException("Unknown variable: ${node.key}")
                }
            }
            is JsonLogicArray -> {
                node.forEach{
                    traverseNode(it, variables)
                }
            }
            is JsonLogicOperation -> {
                if (!expressionNames.contains(node.operator)) {
                    throw JsonLogicException("Unknown operator/operation: ${node.operator}")
                }
                node.arguments.forEach{
                    traverseNode(it, variables)
                }
            }
        }
    }
}

